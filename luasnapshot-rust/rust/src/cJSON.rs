/* automatically generated by rust-bindgen 0.54.1 */

pub const CJSON_VERSION_MAJOR: u32 = 1;
pub const CJSON_VERSION_MINOR: u32 = 7;
pub const CJSON_VERSION_PATCH: u32 = 13;
pub const cJSON_Invalid: u32 = 0;
pub const cJSON_False: u32 = 1;
pub const cJSON_True: u32 = 2;
pub const cJSON_NULL: u32 = 4;
pub const cJSON_Number: u32 = 8;
pub const cJSON_String: u32 = 16;
pub const cJSON_Array: u32 = 32;
pub const cJSON_Object: u32 = 64;
pub const cJSON_Raw: u32 = 128;
pub const cJSON_IsReference: u32 = 256;
pub const cJSON_StringIsConst: u32 = 512;
pub const CJSON_NESTING_LIMIT: u32 = 1000;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cJSON {
    pub next: *mut cJSON,
    pub prev: *mut cJSON,
    pub child: *mut cJSON,
    pub type_: ::std::os::raw::c_int,
    pub valuestring: *mut ::std::os::raw::c_char,
    pub valueint: ::std::os::raw::c_int,
    pub valuedouble: f64,
    pub string: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_cJSON() {
    assert_eq!(
        ::std::mem::size_of::<cJSON>(),
        64usize,
        concat!("Size of: ", stringify!(cJSON))
    );
    assert_eq!(
        ::std::mem::align_of::<cJSON>(),
        8usize,
        concat!("Alignment of ", stringify!(cJSON))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cJSON>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cJSON),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cJSON>())).prev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cJSON),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cJSON>())).child as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cJSON),
            "::",
            stringify!(child)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cJSON>())).type_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cJSON),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cJSON>())).valuestring as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cJSON),
            "::",
            stringify!(valuestring)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cJSON>())).valueint as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cJSON),
            "::",
            stringify!(valueint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cJSON>())).valuedouble as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cJSON),
            "::",
            stringify!(valuedouble)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cJSON>())).string as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cJSON),
            "::",
            stringify!(string)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cJSON_Hooks {
    pub malloc_fn:
        ::std::option::Option<unsafe extern "C" fn(sz: size_t) -> *mut ::std::os::raw::c_void>,
    pub free_fn: ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout_cJSON_Hooks() {
    assert_eq!(
        ::std::mem::size_of::<cJSON_Hooks>(),
        16usize,
        concat!("Size of: ", stringify!(cJSON_Hooks))
    );
    assert_eq!(
        ::std::mem::align_of::<cJSON_Hooks>(),
        8usize,
        concat!("Alignment of ", stringify!(cJSON_Hooks))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cJSON_Hooks>())).malloc_fn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cJSON_Hooks),
            "::",
            stringify!(malloc_fn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cJSON_Hooks>())).free_fn as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cJSON_Hooks),
            "::",
            stringify!(free_fn)
        )
    );
}
pub type cJSON_bool = ::std::os::raw::c_int;
extern "C" {
    pub fn cJSON_Version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cJSON_InitHooks(hooks: *mut cJSON_Hooks);
}
extern "C" {
    pub fn cJSON_Parse(value: *const ::std::os::raw::c_char) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_ParseWithLength(
        value: *const ::std::os::raw::c_char,
        buffer_length: size_t,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_ParseWithOpts(
        value: *const ::std::os::raw::c_char,
        return_parse_end: *mut *const ::std::os::raw::c_char,
        require_null_terminated: cJSON_bool,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_ParseWithLengthOpts(
        value: *const ::std::os::raw::c_char,
        buffer_length: size_t,
        return_parse_end: *mut *const ::std::os::raw::c_char,
        require_null_terminated: cJSON_bool,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_Print(item: *const cJSON) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cJSON_PrintUnformatted(item: *const cJSON) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cJSON_PrintBuffered(
        item: *const cJSON,
        prebuffer: ::std::os::raw::c_int,
        fmt: cJSON_bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cJSON_PrintPreallocated(
        item: *mut cJSON,
        buffer: *mut ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
        format: cJSON_bool,
    ) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_Delete(item: *mut cJSON);
}
extern "C" {
    pub fn cJSON_GetArraySize(array: *const cJSON) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cJSON_GetArrayItem(array: *const cJSON, index: ::std::os::raw::c_int) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_GetObjectItem(
        object: *const cJSON,
        string: *const ::std::os::raw::c_char,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_GetObjectItemCaseSensitive(
        object: *const cJSON,
        string: *const ::std::os::raw::c_char,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_HasObjectItem(
        object: *const cJSON,
        string: *const ::std::os::raw::c_char,
    ) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_GetErrorPtr() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cJSON_GetStringValue(item: *const cJSON) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cJSON_GetNumberValue(item: *const cJSON) -> f64;
}
extern "C" {
    pub fn cJSON_IsInvalid(item: *const cJSON) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_IsFalse(item: *const cJSON) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_IsTrue(item: *const cJSON) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_IsBool(item: *const cJSON) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_IsNull(item: *const cJSON) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_IsNumber(item: *const cJSON) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_IsString(item: *const cJSON) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_IsArray(item: *const cJSON) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_IsObject(item: *const cJSON) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_IsRaw(item: *const cJSON) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_CreateNull() -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_CreateTrue() -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_CreateFalse() -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_CreateBool(boolean: cJSON_bool) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_CreateNumber(num: f64) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_CreateString(string: *const ::std::os::raw::c_char) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_CreateRaw(raw: *const ::std::os::raw::c_char) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_CreateArray() -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_CreateObject() -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_CreateStringReference(string: *const ::std::os::raw::c_char) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_CreateObjectReference(child: *const cJSON) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_CreateArrayReference(child: *const cJSON) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_CreateIntArray(
        numbers: *const ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_CreateFloatArray(numbers: *const f32, count: ::std::os::raw::c_int) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_CreateDoubleArray(numbers: *const f64, count: ::std::os::raw::c_int)
        -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_CreateStringArray(
        strings: *const *const ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_AddItemToArray(array: *mut cJSON, item: *mut cJSON) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_AddItemToObject(
        object: *mut cJSON,
        string: *const ::std::os::raw::c_char,
        item: *mut cJSON,
    ) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_AddItemToObjectCS(
        object: *mut cJSON,
        string: *const ::std::os::raw::c_char,
        item: *mut cJSON,
    ) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_AddItemReferenceToArray(array: *mut cJSON, item: *mut cJSON) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_AddItemReferenceToObject(
        object: *mut cJSON,
        string: *const ::std::os::raw::c_char,
        item: *mut cJSON,
    ) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_DetachItemViaPointer(parent: *mut cJSON, item: *mut cJSON) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_DetachItemFromArray(array: *mut cJSON, which: ::std::os::raw::c_int)
        -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_DeleteItemFromArray(array: *mut cJSON, which: ::std::os::raw::c_int);
}
extern "C" {
    pub fn cJSON_DetachItemFromObject(
        object: *mut cJSON,
        string: *const ::std::os::raw::c_char,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_DetachItemFromObjectCaseSensitive(
        object: *mut cJSON,
        string: *const ::std::os::raw::c_char,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_DeleteItemFromObject(object: *mut cJSON, string: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn cJSON_DeleteItemFromObjectCaseSensitive(
        object: *mut cJSON,
        string: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn cJSON_InsertItemInArray(
        array: *mut cJSON,
        which: ::std::os::raw::c_int,
        newitem: *mut cJSON,
    ) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_ReplaceItemViaPointer(
        parent: *mut cJSON,
        item: *mut cJSON,
        replacement: *mut cJSON,
    ) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_ReplaceItemInArray(
        array: *mut cJSON,
        which: ::std::os::raw::c_int,
        newitem: *mut cJSON,
    ) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_ReplaceItemInObject(
        object: *mut cJSON,
        string: *const ::std::os::raw::c_char,
        newitem: *mut cJSON,
    ) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_ReplaceItemInObjectCaseSensitive(
        object: *mut cJSON,
        string: *const ::std::os::raw::c_char,
        newitem: *mut cJSON,
    ) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_Duplicate(item: *const cJSON, recurse: cJSON_bool) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_Compare(
        a: *const cJSON,
        b: *const cJSON,
        case_sensitive: cJSON_bool,
    ) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_Minify(json: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn cJSON_AddNullToObject(
        object: *mut cJSON,
        name: *const ::std::os::raw::c_char,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_AddTrueToObject(
        object: *mut cJSON,
        name: *const ::std::os::raw::c_char,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_AddFalseToObject(
        object: *mut cJSON,
        name: *const ::std::os::raw::c_char,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_AddBoolToObject(
        object: *mut cJSON,
        name: *const ::std::os::raw::c_char,
        boolean: cJSON_bool,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_AddNumberToObject(
        object: *mut cJSON,
        name: *const ::std::os::raw::c_char,
        number: f64,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_AddStringToObject(
        object: *mut cJSON,
        name: *const ::std::os::raw::c_char,
        string: *const ::std::os::raw::c_char,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_AddRawToObject(
        object: *mut cJSON,
        name: *const ::std::os::raw::c_char,
        raw: *const ::std::os::raw::c_char,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_AddObjectToObject(
        object: *mut cJSON,
        name: *const ::std::os::raw::c_char,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_AddArrayToObject(
        object: *mut cJSON,
        name: *const ::std::os::raw::c_char,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_SetNumberHelper(object: *mut cJSON, number: f64) -> f64;
}
extern "C" {
    pub fn cJSON_SetValuestring(
        object: *mut cJSON,
        valuestring: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cJSON_malloc(size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cJSON_free(object: *mut ::std::os::raw::c_void);
}
